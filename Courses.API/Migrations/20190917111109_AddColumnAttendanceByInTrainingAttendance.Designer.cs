// <auto-generated />
using System;
using Courses.API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Courses.API.Migrations
{
    [DbContext(typeof(CourseContext))]
    [Migration("20190917111109_AddColumnAttendanceByInTrainingAttendance")]
    partial class AddColumnAttendanceByInTrainingAttendance
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
            modelBuilder
                .HasDefaultSchema("Course")
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Assessment.API.Models.AnswerSheetsEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnswerSheetId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Marks");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("QuestionId");

                    b.Property<string>("Remarks")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AnswerSheetsEvaluation");
                });

            modelBuilder.Entity("Assessment.API.Models.AssessmentConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attribute")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("AssessmentConfiguration");
                });

            modelBuilder.Entity("Assessment.API.Models.AssessmentQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerAsImages")
                        .HasMaxLength(50);

                    b.Property<string>("ContentPath");

                    b.Property<string>("ContentType")
                        .HasMaxLength(20);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DifficultyLevel")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsMemoQuestion");

                    b.Property<string>("LearnerInstruction")
                        .HasMaxLength(200);

                    b.Property<int>("Marks");

                    b.Property<string>("MediaFile")
                        .HasMaxLength(200);

                    b.Property<string>("Metadata")
                        .HasMaxLength(200);

                    b.Property<string>("ModelAnswer")
                        .HasMaxLength(500);

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("OptionType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("QuestionStyle")
                        .HasMaxLength(100);

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("QuestionType")
                        .HasMaxLength(50);

                    b.Property<string>("Section")
                        .HasMaxLength(50);

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.ToTable("AssessmentQuestion");
                });

            modelBuilder.Entity("Assessment.API.Models.AssessmentQuestionDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssessmentResultID");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsCorrectAnswer");

                    b.Property<bool>("IsDeleted");

                    b.Property<double?>("Marks");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int?>("OptionAnswerId");

                    b.Property<int>("ReferenceQuestionID");

                    b.Property<string>("SelectedAnswer")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("AssessmentQuestionDetails");
                });

            modelBuilder.Entity("Assessment.API.Models.AssessmentQuestionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentPath");

                    b.Property<string>("ContentType");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsCorrectAnswer");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("OptionText")
                        .HasMaxLength(500);

                    b.Property<int>("QuestionID");

                    b.Property<string>("UploadImage")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("AssessmentQuestionOption");
                });

            modelBuilder.Entity("Assessment.API.Models.AssessmentQuestionRejected", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerAsImages")
                        .HasMaxLength(250);

                    b.Property<string>("AnswerOption1")
                        .HasMaxLength(250);

                    b.Property<string>("AnswerOption2")
                        .HasMaxLength(250);

                    b.Property<string>("AnswerOption3")
                        .HasMaxLength(250);

                    b.Property<string>("AnswerOption4")
                        .HasMaxLength(250);

                    b.Property<string>("AnswerOption5")
                        .HasMaxLength(250);

                    b.Property<string>("AnswerOptions")
                        .HasMaxLength(250);

                    b.Property<string>("CorrectAnswer")
                        .HasMaxLength(250);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DifficultyLevel")
                        .HasMaxLength(250);

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LearnerInstruction")
                        .HasMaxLength(200);

                    b.Property<string>("Marks")
                        .HasMaxLength(250);

                    b.Property<string>("MediaFile")
                        .HasMaxLength(200);

                    b.Property<string>("Metadata")
                        .HasMaxLength(250);

                    b.Property<string>("ModelAnswer")
                        .HasMaxLength(500);

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("QuestionStyle")
                        .HasMaxLength(250);

                    b.Property<string>("QuestionText")
                        .HasMaxLength(500);

                    b.Property<string>("QuestionType")
                        .HasMaxLength(250);

                    b.Property<string>("Section")
                        .HasMaxLength(250);

                    b.Property<string>("Status")
                        .HasMaxLength(250);

                    b.Property<string>("Time")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("AssessmentQuestionRejected");
                });

            modelBuilder.Entity("Assessment.API.Models.AssessmentSheetConfiguration", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Durations")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool?>("IsFixed");

                    b.Property<bool?>("IsNegativeMarking");

                    b.Property<int>("MaximumNoOfAttempts");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int?>("NegativeMarkingPercentage");

                    b.Property<int?>("NoOfQuestionsToShow");

                    b.Property<int>("PassingPercentage")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("AssessmentSheetConfiguration");
                });

            modelBuilder.Entity("Assessment.API.Models.AssessmentSheetConfigurationDetails", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssessmentSheetConfigID");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("QuestionID");

                    b.HasKey("ID");

                    b.ToTable("AssessmentSheetConfigurationDetails");
                });

            modelBuilder.Entity("Assessment.API.Models.GradingRules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("GradingRuleID")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModelId");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("ScorePercentage")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("GradingRules");
                });

            modelBuilder.Entity("Assessment.API.Models.PostAssessmentResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AssessmentEndTime");

                    b.Property<decimal>("AssessmentPercentage");

                    b.Property<string>("AssessmentResult")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("AssessmentStartTime");

                    b.Property<int>("CourseID");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsAdaptiveAssessment");

                    b.Property<bool>("IsContentAssessment");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPreAssessment");

                    b.Property<double>("MarksObtained");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int?>("ModuleId");

                    b.Property<int>("NoOfAttempts");

                    b.Property<int>("PassingPercentage");

                    b.Property<string>("PostAssessmentStatus")
                        .HasMaxLength(30);

                    b.Property<int>("TotalMarks");

                    b.Property<int>("TotalNoQuestions");

                    b.HasKey("Id");

                    b.ToTable("PostAssessmentResult");
                });

            modelBuilder.Entity("Assessment.API.Models.SubjectiveAssessmentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssessmentResultID");

                    b.Property<int>("CheckerID");

                    b.Property<int>("CourseID");

                    b.Property<int>("HeaderID");

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.Property<int>("UserID");

                    b.HasKey("Id");

                    b.ToTable("SubjectiveAssessmentStatus");
                });

            modelBuilder.Entity("Course.API.Model.AdditionalLearning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .HasMaxLength(100);

                    b.Property<string>("ContentId")
                        .HasMaxLength(100);

                    b.Property<int>("CourseId");

                    b.Property<string>("CourseTitle")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("FileForUpload")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("Foreword")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AdditionalLearning");
                });

            modelBuilder.Entity("Courses.API.Model.AccessibilityRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Area");

                    b.Property<int?>("Business");

                    b.Property<string>("ConditionForRules")
                        .HasMaxLength(10);

                    b.Property<int?>("ConfigurationColumn1");

                    b.Property<int?>("ConfigurationColumn10");

                    b.Property<int?>("ConfigurationColumn11");

                    b.Property<int?>("ConfigurationColumn12");

                    b.Property<int?>("ConfigurationColumn2");

                    b.Property<int?>("ConfigurationColumn3");

                    b.Property<int?>("ConfigurationColumn4");

                    b.Property<int?>("ConfigurationColumn5");

                    b.Property<int?>("ConfigurationColumn6");

                    b.Property<int?>("ConfigurationColumn7");

                    b.Property<int?>("ConfigurationColumn8");

                    b.Property<int?>("ConfigurationColumn9");

                    b.Property<int?>("CourseId")
                        .IsRequired();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("EmailID")
                        .HasMaxLength(100);

                    b.Property<int?>("Group");

                    b.Property<int?>("GroupTemplateId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCourseFee");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("Location");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(25);

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Reason");

                    b.Property<string>("ReportsTo")
                        .HasMaxLength(100);

                    b.Property<string>("RuleAnticipation")
                        .HasMaxLength(100);

                    b.Property<int?>("TargetPeriod");

                    b.Property<int?>("UserID");

                    b.Property<string>("UserType")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("AccessibilityRule");
                });

            modelBuilder.Entity("Courses.API.Model.AccessibilityRuleRejected", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseCode");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ErrorMessage")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("UserName")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("AccessibilityRuleRejected");
                });

            modelBuilder.Entity("Courses.API.Model.ActivitiesManagement.Assignments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalReferences")
                        .HasMaxLength(2000);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("DateOfSubmission");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("DesirableFormOutput")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("PurposeOfExercise")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ReferenceDocumentPath")
                        .HasMaxLength(2000);

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("Courses.API.Model.ActivitiesManagement.AssignmentsDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Accountable");

                    b.Property<int>("AssignmentId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.ToTable("AssignmentsDetail");
                });

            modelBuilder.Entity("Courses.API.Model.ActivitiesManagement.TargetSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("DateOfAssessment");

                    b.Property<string>("FrequencyOfAssessment")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Status")
                        .HasMaxLength(20);

                    b.Property<string>("TargetDescription")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("TargetSetting");
                });

            modelBuilder.Entity("Courses.API.Model.AdministrativeFunctions.BatchesFormation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchId");

                    b.Property<int>("CourseId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ModuleId");

                    b.Property<int>("SessionId");

                    b.HasKey("Id");

                    b.ToTable("BatchesFormation");
                });

            modelBuilder.Entity("Courses.API.Model.AdministrativeFunctions.BatchesFormationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchesFormationId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BatchesFormationId");

                    b.ToTable("BatchesFormationDetail");
                });

            modelBuilder.Entity("Courses.API.Model.AdministrativeFunctions.ModuleLevelPlanning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchId");

                    b.Property<int>("CourseId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ModuleId");

                    b.HasKey("Id");

                    b.ToTable("ModuleLevelPlanning");
                });

            modelBuilder.Entity("Courses.API.Model.AdministrativeFunctions.ModuleLevelPlanningDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoTrainerId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("HRCoOrdinatorId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ModuleLevelPlanningId");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("TrainingPlaceId");

                    b.HasKey("Id");

                    b.HasIndex("ModuleLevelPlanningId");

                    b.ToTable("ModuleLevelPlanningDetail");
                });

            modelBuilder.Entity("Courses.API.Model.AdministrativeFunctions.TrainingExpenses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchId");

                    b.Property<int>("CourseId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ModuleId");

                    b.Property<int>("SessionId");

                    b.HasKey("Id");

                    b.ToTable("TrainingExpenses");
                });

            modelBuilder.Entity("Courses.API.Model.AdministrativeFunctions.TrainingExpensesDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountPaid");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Currency")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description")
                        .HasMaxLength(300);

                    b.Property<string>("ExpenseHead")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("TrainingExpenseId");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("TrainingExpenseId");

                    b.ToTable("TrainingExpensesDetail");
                });

            modelBuilder.Entity("Courses.API.Model.ApplicabilityGroupTemplate", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicabilityGroupDescription")
                        .HasMaxLength(150);

                    b.Property<string>("ApplicabilityGroupName")
                        .HasMaxLength(50);

                    b.Property<int?>("Area");

                    b.Property<int?>("Business");

                    b.Property<string>("ConditionForRules")
                        .HasMaxLength(10);

                    b.Property<int?>("ConfigurationColumn1");

                    b.Property<int?>("ConfigurationColumn10");

                    b.Property<int?>("ConfigurationColumn11");

                    b.Property<int?>("ConfigurationColumn12");

                    b.Property<int?>("ConfigurationColumn2");

                    b.Property<int?>("ConfigurationColumn3");

                    b.Property<int?>("ConfigurationColumn4");

                    b.Property<int?>("ConfigurationColumn5");

                    b.Property<int?>("ConfigurationColumn6");

                    b.Property<int?>("ConfigurationColumn7");

                    b.Property<int?>("ConfigurationColumn8");

                    b.Property<int?>("ConfigurationColumn9");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("EmailID")
                        .HasMaxLength(100);

                    b.Property<int?>("Group");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCourseFee");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("Location");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(25);

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("ReportsTo")
                        .HasMaxLength(100);

                    b.Property<string>("RuleAnticipation")
                        .HasMaxLength(100);

                    b.Property<int?>("TargetPeriod");

                    b.Property<int?>("UserID");

                    b.Property<string>("UserType")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("ApplicabilityGroupTemplate");
                });

            modelBuilder.Entity("Courses.API.Model.AssessmentAttemptManagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdditionalAttempts");

                    b.Property<int>("CourseId");

                    b.Property<string>("CourseName")
                        .IsRequired();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsExhausted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("UserId");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("AssessmentAttemptManagement");
                });

            modelBuilder.Entity("Courses.API.Model.AssignmentDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignmentId");

                    b.Property<int>("CourseId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("FilePath");

                    b.Property<string>("FileType");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Remark");

                    b.Property<string>("Status");

                    b.Property<string>("TextAnswer");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("AssignmentDetails");
                });

            modelBuilder.Entity("Courses.API.Model.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttachmentPath")
                        .HasMaxLength(1000);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("FileContents");

                    b.Property<string>("InternalName")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MimeType")
                        .HasMaxLength(100);

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("OriginalFileName")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("Courses.API.Model.AuthoringMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LCMSId");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Skills")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("AuthoringMaster");
                });

            modelBuilder.Entity("Courses.API.Model.AuthoringMasterDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthoringMasterId");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("PageNumber");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("AuthoringMasterDetails");
                });

            modelBuilder.Entity("Courses.API.Model.BatchAnnouncement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BatchCode")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("BatchTitle")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("CourseId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("EventBadgeFile")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastRegistrationDate");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("RegistrationLimit")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("SelectValue")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("BatchAnnouncement");
                });

            modelBuilder.Entity("Courses.API.Model.BespokeParticipants", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BespokeRequestId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("UserMasterId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("BespokeParticipants");
                });

            modelBuilder.Entity("Courses.API.Model.BespokeRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttachmentPath");

                    b.Property<string>("Competency")
                        .HasMaxLength(100);

                    b.Property<string>("CostCode");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("DOJ");

                    b.Property<string>("Department")
                        .HasMaxLength(200);

                    b.Property<string>("DesiredOutcome");

                    b.Property<string>("Grade")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ManagerialCompetancy")
                        .HasMaxLength(100);

                    b.Property<string>("Measure");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<DateTime>("NeedbyDate");

                    b.Property<int>("TotalNumberofParticipants");

                    b.Property<string>("TrainingCostCode");

                    b.Property<string>("TrainingCosts");

                    b.Property<string>("TrainingMethod")
                        .HasMaxLength(100);

                    b.Property<string>("TrainingName");

                    b.Property<string>("TrainingRequestDescription");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("BespokeRequest");
                });

            modelBuilder.Entity("Courses.API.Model.BookCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasMaxLength(100);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("BookCategory");
                });

            modelBuilder.Entity("Courses.API.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ImagePath");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("SequenceNo");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Courses.API.Model.CentralBookLibrary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessibilityRuleId")
                        .HasMaxLength(100);

                    b.Property<bool>("AccessibleToAllUser");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("BookFile")
                        .HasMaxLength(2000);

                    b.Property<string>("BookId")
                        .HasMaxLength(100);

                    b.Property<string>("BookImage")
                        .HasMaxLength(2000);

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Category")
                        .HasMaxLength(200);

                    b.Property<int>("CategoryId");

                    b.Property<string>("ConfigurationColumn")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ConfigurationValue")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("KeywordForSearch")
                        .HasMaxLength(50);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("CentralBookLibrary");
                });

            modelBuilder.Entity("Courses.API.Model.CertificateDownloadDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("CertificateDownloadDetails","Certification");
                });

            modelBuilder.Entity("Courses.API.Model.CertificateTemplates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ModuleId");

                    b.Property<bool>("Status");

                    b.Property<string>("TemplateDesign");

                    b.Property<int>("TemplateId");

                    b.HasKey("Id");

                    b.ToTable("CertificateTemplates","Certification");
                });

            modelBuilder.Entity("Courses.API.Model.Competency.CompetenciesMapping", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompetencyCategoryId");

                    b.Property<int>("CompetencyId");

                    b.Property<int?>("CompetencyLevelId");

                    b.Property<int?>("CourseCategoryId");

                    b.Property<int>("CourseId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int?>("ModuleId");

                    b.HasKey("Id");

                    b.ToTable("CompetenciesMapping");
                });

            modelBuilder.Entity("Courses.API.Model.Competency.CompetenciesMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("CompetencyDescription")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("CompetencyName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("CompetenciesMaster");
                });

            modelBuilder.Entity("Courses.API.Model.Competency.CompetencyCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("CompetencyCategory");
                });

            modelBuilder.Entity("Courses.API.Model.Competency.CompetencyJobRole", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("RoleColumn1")
                        .IsRequired();

                    b.Property<int>("RoleColumn1value");

                    b.Property<string>("RoleColumn2");

                    b.Property<int>("RoleColumn2value");

                    b.HasKey("Id");

                    b.ToTable("CompetencyJobRole");
                });

            modelBuilder.Entity("Courses.API.Model.Competency.CompetencyLevels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BriefDescriptionCompetencyLevel")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("CategoryId");

                    b.Property<int>("CompetencyId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DetailedDescriptionOfLevel")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("CompetencyLevels");
                });

            modelBuilder.Entity("Courses.API.Model.Competency.RolewiseCompetenciesMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompetencyCategoryId");

                    b.Property<int>("CompetencyId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("RoleId");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("RolewiseCompetenciesMapping");
                });

            modelBuilder.Entity("Courses.API.Model.ContentCompletionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Location");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ModuleId");

                    b.Property<int?>("ScheduleId");

                    b.Property<string>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("ContentCompletionStatus");
                });

            modelBuilder.Entity("Courses.API.Model.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminName");

                    b.Property<int?>("AssessmentId");

                    b.Property<int?>("AssignmentId");

                    b.Property<int?>("CategoryId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int>("CompletionPeriodDays");

                    b.Property<int?>("CourseAdminID");

                    b.Property<float>("CourseFee");

                    b.Property<string>("CourseType")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<float>("CreditsPoints");

                    b.Property<string>("Currency")
                        .HasMaxLength(25);

                    b.Property<string>("Description");

                    b.Property<int>("DurationInMinutes");

                    b.Property<int?>("FeedbackId");

                    b.Property<bool>("IsAchieveMastery");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAdaptiveLearning");

                    b.Property<bool>("IsApplicableToAll");

                    b.Property<bool>("IsAssessment");

                    b.Property<bool>("IsAssignment");

                    b.Property<bool>("IsCertificateIssued");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDiscussionBoard");

                    b.Property<bool>("IsFeedback");

                    b.Property<bool>("IsMemoCourse");

                    b.Property<bool>("IsModuleHasAssFeed");

                    b.Property<bool>("IsPreAssessment");

                    b.Property<bool>("IsSection");

                    b.Property<bool>("IsShowInCatalogue");

                    b.Property<string>("Language")
                        .HasMaxLength(40);

                    b.Property<bool?>("LearningApproach")
                        .HasMaxLength(15);

                    b.Property<int?>("MemoId");

                    b.Property<string>("Metadata")
                        .HasMaxLength(500);

                    b.Property<string>("Mission");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("Points");

                    b.Property<int?>("PreAssessmentId");

                    b.Property<Guid>("RowGuid")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int?>("SubCategoryId");

                    b.Property<string>("ThumbnailPath")
                        .HasMaxLength(200);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<int>("TotalModules");

                    b.HasKey("Id");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("Courses.API.Model.CourseCertificateAssociation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CertificateImageName");

                    b.Property<int>("CourseID");

                    b.Property<string>("CourseName");

                    b.Property<DateTime>("Date");

                    b.HasKey("Id");

                    b.ToTable("CourseCertificateAssociation");
                });

            modelBuilder.Entity("Courses.API.Model.CourseCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Prefix");

                    b.HasKey("Id");

                    b.ToTable("CourseCode");
                });

            modelBuilder.Entity("Courses.API.Model.CourseCompletionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("CourseCompletionStatus");
                });

            modelBuilder.Entity("Courses.API.Model.CourseModuleAssociation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssessmentId");

                    b.Property<int?>("CompletionPeriodDays");

                    b.Property<int>("CourseId");

                    b.Property<int?>("FeedbackId");

                    b.Property<bool>("IsAssessment");

                    b.Property<bool>("IsFeedback");

                    b.Property<bool>("IsPreAssessment");

                    b.Property<bool>("Isdeleted");

                    b.Property<int>("ModuleId");

                    b.Property<int?>("PreAssessmentId");

                    b.Property<int?>("SectionId");

                    b.Property<int?>("SequenceNo");

                    b.HasKey("Id");

                    b.ToTable("CourseModuleAssociation");
                });

            modelBuilder.Entity("Courses.API.Model.CourseRating.CourseRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Average");

                    b.Property<int>("CourseId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("FiveStar");

                    b.Property<int>("FourStar");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("OneStar");

                    b.Property<int>("ThreeStar");

                    b.Property<int>("TwoStar");

                    b.HasKey("Id");

                    b.ToTable("CourseRating");
                });

            modelBuilder.Entity("Courses.API.Model.CourseRating.CourseReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("RatingId");

                    b.Property<int>("ReviewRating");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("UseName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("CourseReview");
                });

            modelBuilder.Entity("Courses.API.Model.CoursesEnrollRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<string>("CourseTitle");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Status");

                    b.Property<int>("UserId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CoursesEnrollRequest");
                });

            modelBuilder.Entity("Courses.API.Model.CoursesEnrollRequestDetails", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionTakenBy");

                    b.Property<int>("CoursesEnrollRequestId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Reason");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("CoursesEnrollRequestDetails");
                });

            modelBuilder.Entity("Courses.API.Model.CourseWiseEmailReminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MailSubject")
                        .HasMaxLength(500);

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("TemplateContent");

                    b.Property<int>("TotalUserCount");

                    b.HasKey("Id");

                    b.ToTable("CourseWiseEmailReminder");
                });

            modelBuilder.Entity("Courses.API.Model.CustomerConnectionString", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CustomerConnectionString","Masters");
                });

            modelBuilder.Entity("Courses.API.Model.DegreedContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Type");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("DegreedContent");
                });

            modelBuilder.Entity("Courses.API.Model.DiscussionForum.DiscussionForum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("PostLevel");

                    b.Property<int>("PostParentId");

                    b.Property<int>("PostThreadId");

                    b.Property<int>("SortOrder");

                    b.Property<string>("SubjectText")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("UseName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("DiscussionForum");
                });

            modelBuilder.Entity("Courses.API.Model.EBTDetails", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseID");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("FromData");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Status")
                        .HasMaxLength(20);

                    b.Property<int>("UserId");

                    b.Property<string>("UserName");

                    b.Property<string>("courseTitle");

                    b.HasKey("ID");

                    b.ToTable("EBTDetails");
                });

            modelBuilder.Entity("Courses.API.Model.ExceptionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Message");

                    b.Property<string>("Source");

                    b.Property<string>("StackTrace");

                    b.HasKey("Id");

                    b.ToTable("ExceptionLog");
                });

            modelBuilder.Entity("Courses.API.Model.Faq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LcmsId");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Faq");
                });

            modelBuilder.Entity("Courses.API.Model.Feedback.UserWiseFeedbackAggregation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<int>("CourseRating");

                    b.Property<int?>("FeedbackOptionID");

                    b.Property<int>("FeedbackQuestionID");

                    b.Property<bool>("IsDeleted");

                    b.HasKey("ID");

                    b.ToTable("UserWiseFeedbackAggregation");
                });

            modelBuilder.Entity("Courses.API.Model.FinancialYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Month");

                    b.Property<DateTime>("MonthEndDate");

                    b.Property<DateTime>("MonthStartDate");

                    b.Property<string>("Quarter");

                    b.Property<int>("QuarterSequence");

                    b.Property<DateTime>("QuarterStartDate");

                    b.Property<string>("YearDescription");

                    b.Property<DateTime>("YearEndDate");

                    b.Property<DateTime>("YearStartDate");

                    b.HasKey("Id");

                    b.ToTable("FinancialYear");
                });

            modelBuilder.Entity("Courses.API.Model.ILT.AcademyAgencyMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AcademyAgencyName");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("TrainerType");

                    b.HasKey("Id");

                    b.ToTable("AcademyAgencyMaster");
                });

            modelBuilder.Entity("Courses.API.Model.ILT.AgencyMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgencyName");

                    b.Property<string>("AgencyTrainerName");

                    b.HasKey("Id");

                    b.ToTable("AgencyMaster");
                });

            modelBuilder.Entity("Courses.API.Model.ILT.GoToMeetingDetails", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConferenceCallInfo");

                    b.Property<int>("CourseID");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("JoinURL");

                    b.Property<int>("MaxParticipants");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ScheduleID");

                    b.Property<string>("StartMeetingURL");

                    b.Property<int>("UniqueMeetingId");

                    b.HasKey("ID");

                    b.ToTable("GoToMeetingDetails");
                });

            modelBuilder.Entity("Courses.API.Model.ILT.ILTOnlineSetting", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientID");

                    b.Property<string>("ClientSecret");

                    b.Property<string>("Password");

                    b.Property<string>("RedirectUri");

                    b.Property<string>("Type");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.ToTable("ILTOnlineSetting");
                });

            modelBuilder.Entity("Courses.API.Model.ILT.ILTRequestResponse", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseID");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ModuleID");

                    b.Property<string>("Reason");

                    b.Property<int?>("ReferenceRequestID");

                    b.Property<int>("ScheduleID");

                    b.Property<string>("TrainingRequesStatus");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.ToTable("ILTRequestResponse");
                });

            modelBuilder.Entity("Courses.API.Model.ILT.ILTSchedule", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AcademyAgencyID");

                    b.Property<int?>("AcademyTrainerID");

                    b.Property<string>("AcademyTrainerName");

                    b.Property<string>("AgencyTrainerName");

                    b.Property<float>("Cost");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Currency")
                        .HasMaxLength(25);

                    b.Property<DateTime>("EndDate");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<string>("EventLogo");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ModuleId");

                    b.Property<int>("PlaceID");

                    b.Property<string>("ReasonForCancellation");

                    b.Property<DateTime>("RegistrationEndDate");

                    b.Property<string>("ScheduleCode");

                    b.Property<string>("ScheduleType");

                    b.Property<DateTime>("StartDate");

                    b.Property<TimeSpan>("StartTime");

                    b.Property<string>("TrainerDescription");

                    b.Property<string>("TrainerType");

                    b.Property<string>("WebinarType");

                    b.HasKey("ID");

                    b.ToTable("ILTSchedule");
                });

            modelBuilder.Entity("Courses.API.Model.ILT.ILTScheduleTrainerBindings", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ScheduleID");

                    b.Property<int?>("TrainerID");

                    b.Property<string>("TrainerName");

                    b.Property<string>("TrainerType");

                    b.HasKey("ID");

                    b.ToTable("ILTScheduleTrainerBindings");
                });

            modelBuilder.Entity("Courses.API.Model.ILT.ILTTrainingAttendance", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseID");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPresent");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ModuleID");

                    b.Property<int>("ScheduleID");

                    b.Property<string>("Status");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.ToTable("ILTTrainingAttendance");
                });

            modelBuilder.Entity("Courses.API.Model.ILT.ILTTrainingAttendanceDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttendanceBy");

                    b.Property<DateTime>("AttendanceDate");

                    b.Property<int>("AttendanceId");

                    b.Property<string>("AttendanceStatus");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<TimeSpan>("InTime");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<TimeSpan>("OutTime");

                    b.HasKey("Id");

                    b.ToTable("ILTTrainingAttendanceDetails");
                });

            modelBuilder.Entity("Courses.API.Model.ILT.ModuleTopicAssociation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ModuleId");

                    b.Property<int>("TopicId");

                    b.HasKey("ID");

                    b.ToTable("ModuleTopicAssociation");
                });

            modelBuilder.Entity("Courses.API.Model.ILT.ScheduleCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Prefix");

                    b.HasKey("Id");

                    b.ToTable("ScheduleCode");
                });

            modelBuilder.Entity("Courses.API.Model.ILT.ScheduleHolidayDetails", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsHoliday");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Reason");

                    b.Property<int>("ReferenceID");

                    b.HasKey("ID");

                    b.ToTable("ScheduleHolidayDetails");
                });

            modelBuilder.Entity("Courses.API.Model.ILT.TopicMaster", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("TopicMaster");
                });

            modelBuilder.Entity("Courses.API.Model.ILT.TrainingNomination", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseID");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ModuleID");

                    b.Property<string>("OTP");

                    b.Property<int?>("ReferenceRequestID");

                    b.Property<string>("RequestCode");

                    b.Property<int>("ScheduleID");

                    b.Property<string>("TrainingRequestStatus");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.ToTable("TrainingNomination");
                });

            modelBuilder.Entity("Courses.API.Model.ILT.UserOTPBindings", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseID");

                    b.Property<bool>("IsAddedInNomination");

                    b.Property<int>("ModuleID");

                    b.Property<string>("OTP");

                    b.Property<int>("ScheduleID");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.ToTable("UserOTPBindings");
                });

            modelBuilder.Entity("Courses.API.Model.ILT.ZoomMeetingDetails", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseID");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Duration");

                    b.Property<string>("Host_id");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Join_url");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ScheduleID");

                    b.Property<string>("Start_time");

                    b.Property<string>("Start_url");

                    b.Property<string>("Timezone");

                    b.Property<string>("Topic");

                    b.Property<int>("UniqueMeetingId");

                    b.Property<string>("Uuid");

                    b.HasKey("ID");

                    b.ToTable("ZoomMeetingDetails");
                });

            modelBuilder.Entity("Courses.API.Model.LCMS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssessmentSheetConfigID");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<float>("Duration");

                    b.Property<int?>("FeedbackSheetConfigID");

                    b.Property<string>("InternalName")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsBuiltInAssesment");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsMobileCompatible");

                    b.Property<string>("Language")
                        .HasMaxLength(50);

                    b.Property<string>("LaunchData");

                    b.Property<string>("MetaData")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("MimeType")
                        .HasMaxLength(200);

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("OriginalFileName")
                        .HasMaxLength(200);

                    b.Property<string>("Path")
                        .HasMaxLength(300);

                    b.Property<string>("ThumbnailPath")
                        .HasMaxLength(300);

                    b.Property<string>("Version")
                        .HasMaxLength(50);

                    b.Property<string>("YoutubeVideoId")
                        .HasMaxLength(20);

                    b.Property<string>("ZipPath")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.ToTable("LCMS");
                });

            modelBuilder.Entity("Courses.API.Model.LcmsQuestionAssociation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LcmsId");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("QuetionId");

                    b.HasKey("Id");

                    b.ToTable("LcmsQuestionAssociation");
                });

            modelBuilder.Entity("Courses.API.Model.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("LessonNumber");

                    b.Property<int>("SectionId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Lesson");
                });

            modelBuilder.Entity("Courses.API.Model.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseType")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("CreditPoints");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("LCMSId");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("ModuleType")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("Module");
                });

            modelBuilder.Entity("Courses.API.Model.ModuleCompletionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ModuleId");

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("ModuleCompletionStatus");
                });

            modelBuilder.Entity("Courses.API.Model.MySupervisoryFunction.Nomination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BactchCode")
                        .IsRequired();

                    b.Property<int?>("CourseId")
                        .IsRequired();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int?>("ModuleId")
                        .IsRequired();

                    b.Property<bool>("Nominate");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("TrainingPlace");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Nomination");
                });

            modelBuilder.Entity("Courses.API.Model.ScormVarResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ModuleId");

                    b.Property<int>("NoOfAttempts");

                    b.Property<string>("Result")
                        .HasMaxLength(20);

                    b.Property<float?>("Score");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("ScormVarResult");
                });

            modelBuilder.Entity("Courses.API.Model.ScormVars", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseGuid")
                        .HasMaxLength(100);

                    b.Property<int>("CourseId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ModuleId");

                    b.Property<int>("NoOfAttempt");

                    b.Property<int>("UserId");

                    b.Property<string>("VarName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("VarValue")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ScormVars");
                });

            modelBuilder.Entity("Courses.API.Model.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseCode");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("SectionNumber");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("Courses.API.Model.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.ToTable("SubCategory");
                });

            modelBuilder.Entity("Courses.API.Model.TNA.CourseRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseID");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("IsAccessGiven");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsRequestSendFromHRTOBU");

                    b.Property<bool>("IsRequestSendFromTA");

                    b.Property<bool>("IsRequestSendToBUHead");

                    b.Property<bool>("IsRequestSendToHR");

                    b.Property<bool>("IsRequestSendToLM");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("NewStatus");

                    b.Property<string>("OtherCourseDescription");

                    b.Property<string>("OtherCourseName");

                    b.Property<string>("Status");

                    b.Property<int>("TNAYear");

                    b.Property<int>("UserID");

                    b.HasKey("Id");

                    b.ToTable("CourseRequest");
                });

            modelBuilder.Entity("Courses.API.Model.TNA.CourseScheduleEnrollmentRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BeSpokeId");

                    b.Property<int>("CourseID");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsRequestSendToLevel1");

                    b.Property<bool>("IsRequestSendToLevel2");

                    b.Property<bool>("IsRequestSendToLevel3");

                    b.Property<bool>("IsRequestSendToLevel4");

                    b.Property<bool>("IsRequestSendToLevel5");

                    b.Property<bool>("IsRequestSendToLevel6");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ModuleID");

                    b.Property<string>("RequestStatus");

                    b.Property<string>("RequestedFrom");

                    b.Property<int>("RequestedFromLevel");

                    b.Property<int>("ScheduleID");

                    b.Property<string>("SentBy");

                    b.Property<int>("UserID");

                    b.Property<string>("UserStatusInfo");

                    b.HasKey("Id");

                    b.ToTable("CourseScheduleEnrollmentRequest");
                });

            modelBuilder.Entity("Courses.API.Model.TNA.CourseScheduleEnrollmentRequestDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovedLevel");

                    b.Property<string>("Comment");

                    b.Property<int>("CourseScheduleEnrollmentRequestID");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsNominated");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Status");

                    b.Property<int>("StatusUpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("CourseScheduleEnrollmentRequestDetails");
                });

            modelBuilder.Entity("Courses.API.Model.TNA.CoursesRequestDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseID");

                    b.Property<int>("CourseRequestId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsNominate");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("ReasonForRejection");

                    b.Property<int>("Role");

                    b.Property<string>("Status");

                    b.Property<int>("StatusUpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("CoursesRequestDetails");
                });

            modelBuilder.Entity("Courses.API.Model.TNA.TempCourseScheduleEnrollmentRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseID");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsRequestSendToLevel1");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ModuleID");

                    b.Property<string>("RequestStatus");

                    b.Property<string>("RequestedFrom");

                    b.Property<int>("ScheduleID");

                    b.Property<string>("SentBy");

                    b.Property<int>("UserID");

                    b.Property<string>("UserStatusInfo");

                    b.HasKey("Id");

                    b.ToTable("TempCourseScheduleEnrollmentRequest");
                });

            modelBuilder.Entity("Courses.API.Model.TNA.TNAYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExpiryDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Year");

                    b.HasKey("Id");

                    b.ToTable("TNAYear");
                });

            modelBuilder.Entity("Courses.API.Model.ToDoPriorityList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<bool>("Priority");

                    b.Property<int>("RefId");

                    b.Property<DateTime>("ScheduleDate");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("ToDoPriorityList");
                });

            modelBuilder.Entity("Courses.API.Model.Tokens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("Token");

                    b.Property<string>("UserId")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.ToTable("Tokens","User");
                });

            modelBuilder.Entity("Courses.API.Model.TrainersFunctions.OfflineAssessmentScores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchId");

                    b.Property<int>("CourseId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ModuleId");

                    b.Property<int>("SessionId");

                    b.Property<int>("TotalMarks");

                    b.HasKey("Id");

                    b.ToTable("OfflineAssessmentScores");
                });

            modelBuilder.Entity("Courses.API.Model.TrainersFunctions.OfflineAssessmentScoresDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ObtainedMarks");

                    b.Property<int>("OfflineAssessmentScoresId");

                    b.Property<decimal>("Percentage");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OfflineAssessmentScoresId");

                    b.ToTable("OfflineAssessmentScoresDetail");
                });

            modelBuilder.Entity("Courses.API.Model.TrainersFunctions.TrainingAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchId");

                    b.Property<int>("CourseId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ModuleId");

                    b.Property<int>("SessionId");

                    b.HasKey("Id");

                    b.ToTable("TrainingAttendance");
                });

            modelBuilder.Entity("Courses.API.Model.TrainersFunctions.TrainingAttendanceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPresent");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Remarks")
                        .HasMaxLength(100);

                    b.Property<int>("TrainingAttendanceId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TrainingAttendanceId");

                    b.ToTable("TrainingAttendanceDetail");
                });

            modelBuilder.Entity("Courses.API.Model.TrainingPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccommodationCapacity")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("AlternateContact")
                        .HasMaxLength(20);

                    b.Property<string>("Cityname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(20);

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Facilities")
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("PlaceCode")
                        .HasMaxLength(50);

                    b.Property<string>("PlaceName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PlaceType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("Status");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(50);

                    b.Property<int>("UserID");

                    b.HasKey("Id");

                    b.ToTable("TrainingPlace");
                });

            modelBuilder.Entity("Courses.API.Model.TrendingCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<int>("CourseId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.HasKey("Id");

                    b.ToTable("TrendingCourse");
                });

            modelBuilder.Entity("Courses.API.Model.UserCoursesStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Completed");

                    b.Property<int>("Inprogress");

                    b.Property<DateTime>("LastRefreshedDate");

                    b.Property<int>("NotStarted");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserCoursesStatistics");
                });

            modelBuilder.Entity("Courses.API.Model.UserCourseStatisticsDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Completed");

                    b.Property<int>("CompletedDuration");

                    b.Property<int>("CourseType");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Inprogress");

                    b.Property<int>("InprogressDuration");

                    b.Property<int>("NotStarted");

                    b.Property<int>("NotStartedDuration");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserCourseStatisticsDetails");
                });

            modelBuilder.Entity("Courses.API.Model.UserMemo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsSubmited");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserMemo");
                });

            modelBuilder.Entity("Feedback.API.Model.CommonSmileSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer1")
                        .IsRequired();

                    b.Property<string>("Answer2")
                        .IsRequired();

                    b.Property<string>("Answer3");

                    b.Property<string>("Answer4");

                    b.Property<string>("Answer5");

                    b.Property<int>("AnswerCounter");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("FeedbackLevel")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LimitAnswer");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("QuestionNumber")
                        .HasMaxLength(10);

                    b.Property<string>("QuestionText")
                        .IsRequired();

                    b.Property<string>("QuestionType")
                        .HasMaxLength(20);

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<bool>("ShowEmoji");

                    b.Property<bool>("Skip");

                    b.Property<string>("Status")
                        .HasMaxLength(20);

                    b.Property<string>("TrainingType")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("CommonSmileSheet");
                });

            modelBuilder.Entity("Feedback.API.Model.FeedbackOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("FeedbackQuestionID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("OptionText");

                    b.Property<int>("Rating");

                    b.HasKey("Id");

                    b.ToTable("FeedbackOption");
                });

            modelBuilder.Entity("Feedback.API.Model.FeedbackQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnswersCounter");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAllowSkipping");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmoji");

                    b.Property<bool>("IsSubjective");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("QuestionText");

                    b.Property<string>("QuestionType")
                        .HasMaxLength(20);

                    b.Property<string>("Section")
                        .HasMaxLength(20);

                    b.Property<int?>("SubjectiveAnswerLimit");

                    b.HasKey("Id");

                    b.ToTable("FeedbackQuestion");
                });

            modelBuilder.Entity("Feedback.API.Model.FeedbackQuestionRejected", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswersCounter")
                        .HasMaxLength(250);

                    b.Property<string>("CourseCode")
                        .HasMaxLength(250);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000);

                    b.Property<bool>("IsActive");

                    b.Property<string>("IsAllowSkipping")
                        .HasMaxLength(250);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("IsEmoji")
                        .HasMaxLength(200);

                    b.Property<string>("IsSubjective");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("NoOfOptions")
                        .HasMaxLength(250);

                    b.Property<string>("Option1")
                        .HasMaxLength(250);

                    b.Property<string>("Option2")
                        .HasMaxLength(250);

                    b.Property<string>("Option3")
                        .HasMaxLength(250);

                    b.Property<string>("Option4")
                        .HasMaxLength(250);

                    b.Property<string>("Option5")
                        .HasMaxLength(250);

                    b.Property<string>("QuestionText")
                        .HasMaxLength(2000);

                    b.Property<string>("QuestionType")
                        .HasMaxLength(250);

                    b.Property<string>("Section")
                        .HasMaxLength(250);

                    b.Property<string>("SubjectiveAnswerLimit")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("FeedbackQuestionRejected");
                });

            modelBuilder.Entity("Feedback.API.Model.FeedbackSheetConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmoji");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("FeedbackSheetConfiguration");
                });

            modelBuilder.Entity("Feedback.API.Model.FeedbackSheetConfigurationDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConfigurationSheetId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("FeedbackSheetConfigurationDetails");
                });

            modelBuilder.Entity("Feedback.API.Model.FeedbackStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ModuleId");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("FeedbackStatus");
                });

            modelBuilder.Entity("Feedback.API.Model.FeedbackStatusDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("FeedBackOptionID");

                    b.Property<int>("FeedBackQuestionID");

                    b.Property<int>("FeedbackStatusID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int?>("Rating");

                    b.Property<string>("SubjectiveAnswer");

                    b.HasKey("Id");

                    b.ToTable("FeedbackStatusDetail");
                });

            modelBuilder.Entity("Feedback.API.Model.TrainerFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Counter");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("FeedbackLevel")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Limit");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Option1")
                        .IsRequired();

                    b.Property<string>("Option2")
                        .IsRequired();

                    b.Property<string>("Option3");

                    b.Property<string>("Option4");

                    b.Property<string>("Option5");

                    b.Property<int>("QuestionNumber");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("QuestionType")
                        .HasMaxLength(10);

                    b.Property<string>("Section")
                        .IsRequired();

                    b.Property<string>("SessionType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Status")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("TrainerFeedback");
                });

            modelBuilder.Entity("Courses.API.Model.ActivitiesManagement.AssignmentsDetail", b =>
                {
                    b.HasOne("Courses.API.Model.ActivitiesManagement.Assignments", "Assignment")
                        .WithMany("AssignmentsDetails")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Courses.API.Model.AdministrativeFunctions.BatchesFormationDetail", b =>
                {
                    b.HasOne("Courses.API.Model.AdministrativeFunctions.BatchesFormation", "BatchesFormations")
                        .WithMany("BatchesFormationDetails")
                        .HasForeignKey("BatchesFormationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Courses.API.Model.AdministrativeFunctions.ModuleLevelPlanningDetail", b =>
                {
                    b.HasOne("Courses.API.Model.AdministrativeFunctions.ModuleLevelPlanning", "ModuleLevelPlannings")
                        .WithMany("ModuleLevelPlanningDetails")
                        .HasForeignKey("ModuleLevelPlanningId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Courses.API.Model.AdministrativeFunctions.TrainingExpensesDetail", b =>
                {
                    b.HasOne("Courses.API.Model.AdministrativeFunctions.TrainingExpenses", "TrainingExpense")
                        .WithMany("TrainingExpensesDetails")
                        .HasForeignKey("TrainingExpenseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Courses.API.Model.CoursesEnrollRequest", b =>
                {
                    b.HasOne("Courses.API.Model.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Courses.API.Model.TrainersFunctions.OfflineAssessmentScoresDetail", b =>
                {
                    b.HasOne("Courses.API.Model.TrainersFunctions.OfflineAssessmentScores", "OfflineAssessmentScore")
                        .WithMany("OfflineAssessmentScoresDetails")
                        .HasForeignKey("OfflineAssessmentScoresId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Courses.API.Model.TrainersFunctions.TrainingAttendanceDetail", b =>
                {
                    b.HasOne("Courses.API.Model.TrainersFunctions.TrainingAttendance", "TrainingAttendances")
                        .WithMany("TrainingAttendanceDetails")
                        .HasForeignKey("TrainingAttendanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

        }
    }
}
