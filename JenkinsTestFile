pipeline {
    agent any
    environment {
        scannerHome = "C:\\sonar\\sonarqube\\bin\\sonar-scanner-msbuild-4.6+"
        projectFile = "C:\\tmp\\dotnet-app\\Assessment.API\\Assessment.API.csproj"
    }
    stages {
        stage('SCM') {
            steps {
                checkout scm
            }
        }
        stage('Build and SonarQube Analysis') {
            steps {
                // Restore NuGet packages
                bat "\"C:\\Program Files\\dotnet\\dotnet.exe\" restore \"${projectFile}\""
                // Ensure the correct .NET SDK version is used
                bat "\"C:\\Program Files\\dotnet\\dotnet.exe\" --list-sdks"
                withSonarQubeEnv('SonarQube servers') {
                    // Begin SonarQube analysis
                    bat "\"${scannerHome}\\SonarScanner.MSBuild.exe\" begin /k:\"Assesment-api\""
                    // Build the .NET project
                    bat "\"C:\\Program Files\\dotnet\\dotnet.exe\" build \"${projectFile}\""
                    // End SonarQube analysis
                    bat "\"${scannerHome}\\SonarScanner.MSBuild.exe\" end"
                }
            }
        }
    }
    post {
        always {
            script {
                def apiUrl = "${SONAR_HOST_URL}/api/measures/component"
                def parameters = [
                    metricKeys: "pdf-report.pdf",
                    component: "sqa_52f4dc04ed78f05165a78093694179a413c3a082"
                ]

                def response = httpRequest(
                    httpMode: 'GET',
                    url: apiUrl,
                    contentType: 'APPLICATION_JSON',
                    customHeaders: [[name: 'Authorization', value: "Bearer ${SONAR_AUTH_TOKEN}"]],
                    ignoreSslErrors: true,
                    timeout: 60,
                    responseHandle: 'NONE',
                    urlParameters: parameters
                )

                if (response.status == 200) {
                    // Download the PDF report to a specified location
                    writeFile file: 'C:/report.pdf', text: response.toMap().content
                } else {
                    error "Failed to download PDF report: ${response.status} - ${response.content}"
                }
            }
        }
    }
}
